__author__ = "Jessika Nordin"
__copyright__ = "Copyright 2021, Jessika Nordin"
__email__ = "jessika.nordin@scilifelab.uu.se"
__license__ = "GPL-3"


include: "rules/common.smk"


report: "report/workflow.rst"


#include: "rules/fq2vcf.smk"
#include: "rules/vcf_filter.smk"


rule all:
    input:
        ["parabricks/deepvariant/%s.vcf" % sample for sample in get_samples(samples)],
        "qc/multiqc/MultiQC.html",

#        ["vcf_filter/%s.vcf.gz" % sample for sample in get_samples(samples)],
# can change the function in common-smk to use : unpack(compile_output_list),


module prealignment:
    snakefile:
        github("hydra-genetics/prealignment", path="workflow/Snakefile", tag=config["modules"]["prealignment"],)
    config:
        config


use rule * from prealignment as module_*


module parabricks:
    snakefile:
        github("hydra-genetics/parabricks", path="workflow/Snakefile", tag=config["modules"]["parabricks"],)
    config:
        config

use rule fq2bam from parabricks as parabricks_fq2bam

use rule deepvariant from parabricks as parabricks_deepvariant


module qc:
    snakefile:
        github("hydra-genetics/qc", path="workflow/Snakefile", tag=config["modules"]["qc"],)
    config:
        config

use rule multiqc from qc as qc_multiqc

use rule fastqc from qc as qc_fastqc

use rule picard_collect_duplication_metrics from qc as qc_pic_dup_met with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",

use rule picard_collect_insert_size_metrics from qc as qc_pic_ins_size with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",

use rule picard_collect_gc_bias_metrics from qc as qc_pic_gc_met with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",

use rule picard_collect_multiple_metrics from qc as qc_pic_multi_met with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",

use rule picard_collect_alignment_summary_metrics from qc as qc_pic_align_sum_met with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",

use rule picard_collect_hs_metrics from qc as qc_pic_hs_met with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",

use rule samtools_stats from qc as qc_samtools_stats with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",

use rule mosdepth from qc as qc_mosdepth with:
    input:
        bam="parabricks/fq2bam/{sample}_{type}.bam",
        bai="parabricks/fq2bam/{sample}_{type}.bam.bai",
#        bed="test.bed",
