__author__ = "Jessika Nordin"
__copyright__ = "Copyright 2021, Jessika Nordin"
__email__ = "jessika.nordin@scilifelab.uu.se"
__license__ = "GPL-3"


include: "rules/common.smk"


report: "report/workflow.rst"


#include: "rules/vcf_filter.smk"


rule all:
    input:
        unpack(compile_output_list),
# can change the function in common-smk to use : unpack(compile_output_list),

module compression:
    snakefile:
        github("hydra-genetics/compression", path="workflow/Snakefile", tag=config["modules"]["compression"],)
    config:
        config

use rule * from compression as compression_*

use rule crumble from compression as compression_crumble

use rule samtools_view from compression as compression_samtools_view with:
    input:
        bam="parabricks/pbrun_fq2bam/{file}.bam",
        bai="parabricks/pbrun_fq2bam/{file}.bam.bai",
        ref=config.get("reference", {}).get("fasta", ""),

use rule spring from compression as compression_spring


module prealignment:
    snakefile:
        github("hydra-genetics/prealignment", path="workflow/Snakefile", tag=config["modules"]["prealignment"],)
    config:
        config

use rule * from prealignment as prealign_*


module parabricks:
    snakefile:
        github("hydra-genetics/parabricks", path="workflow/Snakefile", tag=config["modules"]["parabricks"],)
    config:
        config

use rule * from parabricks as parabricks_*


include: "rules/add_ref_to_vcf.smk"

include: "rules/conifer.smk"

include: "rules/peddy.smk"


module qc:
    snakefile:
        github("hydra-genetics/qc", path="workflow/Snakefile", tag=config["modules"]["qc"],)
    config:
        config

use rule fastqc from qc as qc_fastqc

use rule mosdepth_bed from qc as qc_mosdepth_bed with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        bai="parabricks/pbrun_fq2bam/{sample}_{type}.bam.bai",
        bed=config["reference"]["design_bed"],

use rule multiqc from qc as qc_multiqc with:
    output:
        html="qc/multiqc/multiqc_{report}.html",
        directory=directory("qc/multiqc/multiqc_{report}_data"),

use rule picard_collect_alignment_summary_metrics from qc as qc_pic_align_sum_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],

use rule picard_collect_duplication_metrics from qc as qc_pic_dup_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
    output:
        metrics="qc/picard_collect_duplication_metrics/{sample}_{type}.txt",

use rule picard_collect_gc_bias_metrics from qc as qc_pic_gc_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],

use rule picard_collect_hs_metrics from qc as qc_pic_hs_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        bait_intervals=config["reference"]["design_intervals"],
        target_intervals=config["reference"]["design_intervals"],
        reference=config["reference"]["fasta"],

use rule picard_collect_insert_size_metrics from qc as qc_pic_ins_size with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",

use rule picard_collect_multiple_metrics from qc as qc_pic_multi_met with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        ref=config["reference"]["fasta"],

use rule samtools_stats from qc as qc_samtools_stats with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",

use rule samtools_idxstats from qc as qc_samtools_idxstats with:
    input:
        bam="parabricks/pbrun_fq2bam/{sample}_{type}.bam",
        bai="parabricks/pbrun_fq2bam/{sample}_{type}.bam.bai",

module misc:
    snakefile:
        github("hydra-genetics/misc", path="workflow/Snakefile", tag=config["modules"]["misc"])
    config:
        config

use rule samtools_index from misc as misc_samtools_index with:
    input:
        cram="{file}.crumble.cram",
    output:
        crai="{file}.crumble.cram.crai",
    params:
        extra=config.get("extra", {}).get("extra", ""),
    log:
        "{file}.crumble.cram.crai.log",
    benchmark:
        repeat(
            "{file}.crumble.cram.crai.benchmark.tsv",
            config.get("samtools_index", {}).get("benchmark_repeats", 1),
        )
    message:
        "{rule}: Index {wildcards.file}.crumble.cram file"
